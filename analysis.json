{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "ArcComponents",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "arc-settings-panel-mixin.html",
        "start": {
          "line": 21,
          "column": 2
        },
        "end": {
          "line": 21,
          "column": 28
        }
      },
      "mixins": [
        {
          "description": "Components implementing this mixin are part of ARC settings panel.\nAfter mixing it into the prototype the component gain access to common\nmethods to read and update application settings.\n\n## Processing initial settings\n\nThe element should override two methods: `_processValues()` and\n`_setSettings()`. Process values shouls process incomming data and set\ndefaults and proper data types (application storage may not respect data\ntypes!). When this function is not provided the element will use data as they\narrive from settings provider. The `_setSettings()` function should be used\nto set appropieate settings on the UI.\n\n```javascript\n_processValues(values) {\n if (values.myKey) {\n   values.myKey = true;\n }\n return values;\n}\n\n_setSettings(values) {\n this.myValue = values.myKey;\n}\n```\n\n## Updating settings\n\nTo update settings using `updateSetting()` function first set `__settingsRestored`\nto true on the element. It ensures to not send events when restoring the data.\nUpdate function has a debouncer set to 300 ms. Each change will be commited\nafter this time wiht the last updated value.\n\n```javascript\n_setSettings(values) {\n this.myValue = values.myKey;\n this.__settingsRestored = true;\n}\n\n_valueChangeHandler(value) {\n this.updateSetting('myKey', value);\n}\n```\n\n## Handling update event\n\nImplement `_settingsChanged(key, value)` function in the component and\nthe function will be called each time a setting was updated.\n\n```javascript\n...\n_settingsChanged(key, value) {\n if (key === 'my-setting') {\n   this.myValue = value;\n }\n}\n...\n```",
          "summary": "",
          "path": "arc-settings-panel-mixin.html",
          "properties": [
            {
              "name": "manual",
              "type": "boolean | null | undefined",
              "description": "When set the element will not request current settings state and\nwill wait until it's properties are set.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 99,
                  "column": 8
                },
                "end": {
                  "line": 99,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "loading",
              "type": "boolean | null | undefined",
              "description": "When set the settings are baing loaded.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 103,
                  "column": 8
                },
                "end": {
                  "line": 103,
                  "column": 62
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "page",
              "type": "number | null | undefined",
              "description": "Some panels have sub pages. This tracks selected page.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 107,
                  "column": 8
                },
                "end": {
                  "line": 107,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "__settingsRestored",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 8
                },
                "end": {
                  "line": 108,
                  "column": 57
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 4
                },
                "end": {
                  "line": 123,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 125,
                  "column": 4
                },
                "end": {
                  "line": 128,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "loadSettings",
              "description": "Dispatches `settings-read` custom event to settings provider to read\napplication settings and sets received values on the component.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 4
                },
                "end": {
                  "line": 143,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "Promise",
                "desc": "Promise resolved when operartion ends."
              }
            },
            {
              "name": "_readSettings",
              "description": "Reads settings from the settings provider",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 4
                },
                "end": {
                  "line": 161,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "Promise"
              }
            },
            {
              "name": "_processValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 4
                },
                "end": {
                  "line": 165,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "values"
                }
              ]
            },
            {
              "name": "_setSettings",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 167,
                  "column": 4
                },
                "end": {
                  "line": 167,
                  "column": 21
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "updateSetting",
              "description": "Dispatches `settings-changed` to settings provider with new value.\nThe event is dispatched with 300 ms debouncer.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 4
                },
                "end": {
                  "line": 194,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "key",
                  "type": "String",
                  "description": "Setting key"
                },
                {
                  "name": "value",
                  "type": "any",
                  "description": "Value to store. Values are serialized"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_updateSetting",
              "description": "Dispatches `settings-changed` event to store the setting value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 200,
                  "column": 4
                },
                "end": {
                  "line": 215,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "String",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "any",
                  "description": "A value to store."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_boolValue",
              "description": "Returns a boolean value for the `value`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 221,
                  "column": 4
                },
                "end": {
                  "line": 235,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "any"
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "_numValue",
              "description": "Returns a numeric value for the `value`",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 241,
                  "column": 4
                },
                "end": {
                  "line": 247,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "val",
                  "type": "any",
                  "description": "Current value"
                }
              ],
              "return": {
                "type": "Number",
                "desc": "Translated value"
              }
            },
            {
              "name": "_showPage",
              "description": "Shows internal sub-page",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 253,
                  "column": 4
                },
                "end": {
                  "line": 270,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e",
                  "type": "ClickEvent"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "back",
              "description": "Restores the main page of the editor.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 274,
                  "column": 4
                },
                "end": {
                  "line": 276,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_toggleOption",
              "description": "To be used when a list item has a toggle button.\nWhen clicking on the list option this function should be called to\ntoggle the button.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 283,
                  "column": 4
                },
                "end": {
                  "line": 286,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e",
                  "type": "ClickEvent"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_cancelEvent",
              "description": "Cancels the event and it's propagation.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 294,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e",
                  "type": "Event"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_openLink",
              "description": "Opens a URL in new window.\nIf the application handle `open-external-url` then it does nothing.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 301,
                  "column": 4
                },
                "end": {
                  "line": 315,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "String"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__settingsUpdated",
              "description": "Handler for `settings-changed` event.\nCalls `_settingsChanged` function if implementing element has this method.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 321,
                  "column": 4
                },
                "end": {
                  "line": 329,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e",
                  "type": "CustomEvent"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 0
            },
            "end": {
              "line": 332,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "ArcComponents.ArcSettingsPanelMixin",
          "attributes": [
            {
              "name": "manual",
              "description": "When set the element will not request current settings state and\nwill wait until it's properties are set.",
              "sourceRange": {
                "start": {
                  "line": 99,
                  "column": 8
                },
                "end": {
                  "line": 99,
                  "column": 23
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "loading",
              "description": "When set the settings are baing loaded.",
              "sourceRange": {
                "start": {
                  "line": 103,
                  "column": 8
                },
                "end": {
                  "line": 103,
                  "column": 62
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "page",
              "description": "Some panels have sub pages. This tracks selected page.",
              "sourceRange": {
                "start": {
                  "line": 107,
                  "column": 8
                },
                "end": {
                  "line": 107,
                  "column": 20
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ]
}
